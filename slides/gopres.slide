The Go Programming Language
Tuesday, March 7th, 2023

Liam Hogan

*  Agenda
- Liam Introduction
- What is Go?
- Common Usecases
- Up and Running with Go
- Go Basics
- Types
- 

* What is Go?
Go is a programming language that was developed by people at google.
.background ../images/go-letter-logo.png
.image ../images/go-gopher-logo.webp

* Common Usecases
.image ../images/what-is-possible-with-go-1.png 325 900
.image ../images/what-is-possible-with-go-2.png 325 200

: Common use cases for this include Cloud and Network Services, CLIs and Web Development

* Up and Running with Go

* Ready to Learn About Go
.play ../code/UpAndRunningWithGo/ReadyToLearnAbout/ready-to-learn-about.go

* Learning Variables
.play ../code/UpAndRunningWithGo/LearningVariables/learning-variables.go /START OMIT/,/END OMIT/

* Exported Names
.play ../code/UpAndRunningWithGo/ExportedNames/exported-names.go

* Functions
.play ../code/UpAndRunningWithGo/TwoFunctions/two-functions.go

* Functions (Improved)
.play ../code/UpAndRunningWithGo/TwoFunctionsImproved/two-functions-improved.go

* Basics

* Basics
- Deeper Look at Variables
- Types
- Constants
- String Formatting

* Deeper Look at Variables

* Deeper Look at Variables
.play ../code/Basics/DeeperLookAtVariables/VP1/variable-practice01.go /START OMIT/,/END OMIT/

* Deeper Look at Variables - Scope
.play ../code/Basics/DeeperLookAtVariables/VP2/variable-practice02.go /START OMIT/,/END OMIT/

* Deeper Look at Variables - Zero Values
.play ../code/Basics/DeeperLookAtVariables/VP3/variable-practice03.go

* Deeper Look at Variables - Short Variable Declaration
.play ../code/Basics/DeeperLookAtVariables/VP4/variable-practice04.go /START OMIT/,/END OMIT/

* Deeper Look at Variables - Shadowing
.play ../code/Basics/DeeperLookAtVariables/VP5/variable-practice05.go

* Types

* Introduction to Types
.play ../code/Basics/Types/LT1/learning-types01.go /START OMIT/,/END OMIT/

* Types - Transformations with Built-In Functions
.play ../code/Basics/Types/LT2/learning-types02.go /START OMIT/,/END OMIT/

* Types - Inference
.play ../code/Basics/Types/LT3/learning-types03.go

* Types - Transformations String to Integer
.play ../code/Basics/Types/LT4/learning-types04.go /START OMIT/,/END OMIT/

* Constants

* Introduction to Constants
.play ../code/Basics/Constants/C1/constants01.go

* Introduction to Numerical Constants
.play ../code/Basics/Constants/C2/constants02.go /START OMIT/,/END OMIT/

* Untyped vs Typed Constants
.play ../code/Basics/Constants/C3/constants03.go /START OMIT/,/END OMIT/

* String Formatting

* Introduction to String Formatting and Formatting Verbs
.play ../code/Basics/StringFormatter/SF1/string-format01.go /START OMIT/,/END OMIT/

* String Formatting - Indexing Values
.play ../code/Basics/StringFormatter/SF2/string-format02.go

* Using fmt.Printf - String Formatting Structs and Pirate Treasure
.play ../code/Basics/StringFormatter/SF3/string-format03.go /START OMIT/,/END OMIT/

* Composite Types

* Composite Types
- Arrays
- Slices
- Functions
- Variadic Functions
- Structs
- Receiver Methods (Receiver Functions)
- Pointers

* Arrays

* Array Basics
.play ../code/CompositeTypes/Arrays/A1/arrays01.go

* Selecting Value by Index
.play ../code/CompositeTypes/Arrays/A2/arrays02.go

* Pre-defining Values
.play ../code/CompositeTypes/Arrays/A3/arrays03.go

* Slices

* Slices Relationship to Arrays
.play ../code/CompositeTypes/Slices/S1/slices01.go

* Copy and Append
.play ../code/CompositeTypes/Slices/S2/slices02.go /START OMIT/,/END OMIT/

* Length vs Capacity
.play ../code/CompositeTypes/Slices/S3/slices03.go /START OMIT/,/END OMIT/

* Functions

* Function Breakdown
.play ../code/CompositeTypes/GoFunctions/GF1/functions01.go

* Function Returns: "nil"
.play ../code/CompositeTypes/GoFunctions/GF2/functions02.go

* Function Returns: "error"
.play ../code/CompositeTypes/GoFunctions/GF3/functions03.go /START OMIT/,/END OMIT/

* Function Literals: Anonymous
.play ../code/CompositeTypes/GoFunctions/GF4/functions04.go /START OMIT/,/END OMIT/

* Variadic Functions

* Variadic Functions Example
.play ../code/CompositeTypes/VariadicFunctions/V1/variadic01.go

* Structs

* Introduction to Structs
.play ../code/CompositeTypes/GoStructs/S1/structs01.go

* Structs Continued
.play ../code/CompositeTypes/GoStructs/S3/structs03.go

* Receiver Methods (Receiver Functions)

* Defining Methods
.play ../code/CompositeTypes/GoReceiverFunctionsMethods/M1/methods01.go /START OMIT/,/END OMIT/

* Introduction to Working with Methods
.play ../code/CompositeTypes/GoReceiverFunctionsMethods/M2/methods02.go /START OMIT/,/END OMIT/

* Value and Pointer Receivers
.play ../code/CompositeTypes/GoReceiverFunctionsMethods/M3/methods03.go

* Pointers

* Introduction to Pointers
.play ../code/CompositeTypes/Pointers/P1/points01.go

* Dereference Operations
.play ../code/CompositeTypes/Pointers/P2/points02.go

* Address-of (&) Operators
.play ../code/CompositeTypes/Pointers/P3/points03.go /START OMIT/,/END OMIT/

* Why we need Pointers Example: Without Pointers
.play ../code/CompositeTypes/Pointers/P4/points04.go

* Why we need Pointers Example: With Pointers
.play ../code/CompositeTypes/Pointers/P5/points05.go /START OMIT/,/END OMIT/

* Other Topics
- Maps

* Idiomatic Go

* Idiomatic Go
- Conditionals
- Switch
- Looping
- Panic, Defer, and Recover

* Conditionals

* If Statements
.play ../code/IdiomaticGo/Conditionals/C1/conditionals01.go

* If, Else Statements
.play ../code/IdiomaticGo/Conditionals/C2/conditionals02.go

* If, Else If, Else Statements
.play ../code/IdiomaticGo/Conditionals/C3/conditionals03.go

* Switch

* Switch Cases and Default Case
.play ../code/IdiomaticGo/Switch/S1/switch01.go

* Exploring 'switch true' with a Default
.play ../code/IdiomaticGo/Switch/S2/switch02.go

* Switch with No Default Case
.play ../code/IdiomaticGo/Switch/S3/switch03.go /START OMIT/,/END OMIT/

* Case with Multiple Expressions
.play ../code/IdiomaticGo/Switch/S4/switch04.go

* Fallthrough
.play ../code/IdiomaticGo/Switch/S5/switch05.go /START OMIT/,/END OMIT/

* Looping

* Basic For-Loop
.play ../code/IdiomaticGo/Looping/L1/looping01.go

* While Loops (well, not really...)
.play ../code/IdiomaticGo/Looping/L2/looping02.go

* For-Loop Behaving like a While-Loop (Improved)
.play ../code/IdiomaticGo/Looping/L3/looping03.go

* For-Each Range Loop
.play ../code/IdiomaticGo/Looping/L4/looping04.go /START OMIT/,/END OMIT/

* Defer, Panic, and Recover

* Defer

* Defer Example
.play ../code/IdiomaticGo/Defer/D2/defer02.go

* Defer Example: Continued
.play ../code/IdiomaticGo/Defer/D3/defer03.go

* Defer Example: Cleanup Operations on File Creation
.play ../code/IdiomaticGo/Defer/D1/defer01.go /START OMIT/,/END OMIT/

* Panic

* Calling the Panic Function Directly
.play ../code/IdiomaticGo/Panic/P1/panic01.go

* Raising a Panic
.play ../code/IdiomaticGo/Panic/P2/panic02.go

* Panic and Defer Relationship
.play ../code/IdiomaticGo/Panic/P4/panic04.go

* Resulting Panics from Illegal Conditions
.play ../code/IdiomaticGo/Panic/P3/panic03.go

* Recover

* Divide Function Improved
.play ../code/IdiomaticGo/Recover/R1/recover01.go

* Defer, Panic, Recover
.play ../code/IdiomaticGo/Recover/R2/recover02.go /START OMIT/,/END OMIT/

* Other Topics
- Reading in Console Input
- Command Line Arguments and Flags
- Environment Variables
- Parsing and Generating `.txt`, `.json`, `.xml`, `.csv`, `.yaml` Files
- Go Templates

* Beyond the Basics

* Beyond the Basics
- Interfaces
- Unit Testing
- Concurrency with Go Routines

* Interfaces

* Interfaces
.play ../code/BeyondTheBasics/Interfaces/interfaces01.go /START OMIT/,/END OMIT/

* Unit Testing

* Unit Testing
.play ../code/BeyondTheBasics/Testing/testing01.go /START OMIT/,/END OMIT/

* Concurrency with Go Routines

* Go Routine Without Wait Group
.play ../code/BeyondTheBasics/Routines/R1/routines01.go

* Go Routine with Wait Group
.play ../code/BeyondTheBasics/Routines/R2/routines02.go /START OMIT/,/END OMIT/

* Another Go Routine Example: Mutexes
.play ../code/BeyondTheBasics/Routines/R3/routines03.go /START OMIT/,/END OMIT/

* Format your Slides
Let's try *bold*.
How do you like _italic_?
`Program` `Font`
_A_lot_of_italic_text_